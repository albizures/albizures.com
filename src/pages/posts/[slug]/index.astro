---
import { SITE } from '../../../config'
import { getPosts, type PostEntry } from '../../../content/config'
import PostDetails from '../../../layouts/PostDetails.astro'
import Posts from '../../../layouts/Posts.astro'
import { slugify, sortCollection } from '../../../utils/collections'
import getPageNumbers from '../../../utils/getPageNumbers'

export type Props = {
	post: PostEntry
}

export async function getStaticPaths() {
	const posts = await getPosts(({ data }) => !data.draft || !import.meta.env.PROD)

	const postResult = posts.map((post) => ({
		params: { slug: slugify(post) },
		props: { post },
	}))

	const pagePaths = getPageNumbers(posts.length).map((pageNum) => ({
		params: { slug: String(pageNum) },
	}))

	return [...postResult, ...pagePaths]
}

const { slug } = Astro.params
const { post } = Astro.props

const posts = await getPosts()

const sortedPosts = sortCollection(posts)

const totalPages = getPageNumbers(sortedPosts.length)

const currentPage
	= slug && !Number.isNaN(Number(slug)) && totalPages.includes(Number(slug))
		? Number(slug)
		: 0
const lastPost = currentPage * SITE.itemPerPage
const startPost = lastPost - SITE.itemPerPage

const paginatedPosts = sortedPosts.slice(startPost, lastPost);

---

{
	post
? (
		<PostDetails post={post} />
	)
: (
		<Posts
			posts={paginatedPosts}
			pageNum={currentPage}
			totalPages={totalPages.length}
		/>
	)
}
